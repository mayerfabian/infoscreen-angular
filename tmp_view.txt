import {
  Component,
  OnInit,
  OnDestroy,
  ChangeDetectionStrategy,
  signal,
  computed,
  effect,
  Input,
} from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { ActivatedRoute } from '@angular/router';

type IsoDatetime = string;

export interface VerfasstVon {
  standesbuchnummer: number;
  vorname: string;
  zuname: string;
  anzeige_name: string;
}
export interface TagebuchEintrag {
  id: number;
  fzg: string | null;
  text: string;
  meldungskategorie: string;
  uhrzeit_de: string;
  datetime_iso: IsoDatetime;
  verfasst_von: VerfasstVon;
}
export interface Fahrzeug {
  einsatznummer: string;
  rufname: string;
  funkrufname: string;
  status: number;
  besatzung: string | null;
  km: number | null;
  timestamp_iso: IsoDatetime;
  aus_iso: IsoDatetime | null;
  ein_iso: IsoDatetime | null;
  verantwortlich: VerfasstVon;
}
export interface EinsatzGruppe {
  einsatznummer: string;
  alarmstufe: string;
  ort: string | null;
  grund: string;
  einsatzdatum_iso: IsoDatetime;\r\n  einsatzzeitein_iso?: IsoDatetime | null;\r\n  einsatzzeitaus_iso?: IsoDatetime | null;\r\n  einsatzzeitalarm_iso?: IsoDatetime | null;
  tagebuch: TagebuchEintrag[];
  fahrzeuge?: Fahrzeug[];
}
export interface EinsatzOffenObject {
  [einsatznummer: string]: EinsatzGruppe;
}
export interface ApiData {
  einsatz_offen: EinsatzOffenObject;
  einsatzhistory: Array<{
    einsatztag: string;
    einsatzdatum_iso: IsoDatetime;
    einsatzstatus: 'offen' | 'beendet';
    einsatzalarmstufe: string;
    einsatzort: string | null;
    einsatzgrund: string;
  }>;
}
export interface ApiResponse {
  ok: boolean;
  meta: { generated_at: IsoDatetime; version: string };
  data: ApiData;
}

@Component({
  selector: 'app-rest-v2',
  standalone: true,
  imports: [CommonModule, HttpClientModule, DatePipe],
  templateUrl: './rest-v2.component.html',
  styleUrls: ['./rest-v2.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class RestV2Component implements OnInit, OnDestroy {
  @Input() uwzUrl?: string;
  @Input() reloadIframes?: boolean;
  @Input() apiUrl?: string;

  private readonly DEFAULT_API_URL = 'https://info.ff-wuerflach.at/api/einsatz.php';
  private readonly FAST_MS = 10_000;
  private readonly SLOW_MS = 10 * 60_000;
  private readonly TRANSITION_MS = 600;

  /** wird im ctor via ?dev=1 gesetzt (DEV=2s / PROD=8s) */
  private CAROUSEL_INTERVAL = 8_000;

  private loadingSig = signal<boolean>(false);
  private errorSig = signal<string | null>(null);
  private payloadSig = signal<ApiResponse | null>(null);

  readonly loading = computed(() => this.loadingSig());
  readonly error = computed(() => this.errorSig());

  /** Offene EinsÃ¤tze (neueste zuerst) */
  readonly offeneEinsaetze = computed<EinsatzGruppe[]>(() => {
    const data = this.payloadSig()?.data?.einsatz_offen;
    if (!data) return [];
    const list = Object.values(data);
    return list.sort((a, b) => {
      const at = new Date(a.einsatzdatum_iso).getTime();
      const bt = new Date(b.einsatzdatum_iso).getTime();
      if (bt !== at) return bt - at;
      return (b.einsatznummer || '').localeCompare(a.einsatznummer || '');
    });
  });

  /** 1-pro-Slide, Wrap via Duplikat */
  readonly slides = computed<EinsatzGruppe[]>(() => {
    const src = this.offeneEinsaetze();
    return src.length > 1 ? [...src, src[0]] : src;
  });

  readonly slideIndex = signal<number>(0);
  readonly noTransition = signal<boolean>(false);

  private nextPollHandle: any;
  private carouselHandle: any;
  private wrapTimeout?: any;

  constructor(private http: HttpClient, private route: ActivatedRoute) {
    // dev per Query-Param ?dev=1
    const dev = this.route.snapshot.queryParamMap.get('dev');
    this.CAROUSEL_INTERVAL = dev === '1' ? 2_000 : 8_000;

    effect(() => void this.errorSig());

    // Carousel Start/Stop bei Datenwechsel
    effect(() => {
      const n = this.offeneEinsaetze().length;
      const m = this.slides().length;
      if (this.slideIndex() >= m && m > 0) this.slideIndex.set(0);
      if (n > 1) this.startCarousel(); else this.stopCarousel();
    });
  }

  ngOnInit(): void { this.fetch(); }
  ngOnDestroy(): void {
    this.clearNextPoll();
    this.stopCarousel();
    if (this.wrapTimeout) clearTimeout(this.wrapTimeout);
  }

  /** Tagebuchfilter: zzImage & Fahrzeugdisponiert raus, neueste zuerst */
  entriesForDisplay(e: EinsatzGruppe) {
    const arr = e?.tagebuch ?? [];
    return [...arr]
      .filter((en) => {
        const cat = (en.meldungskategorie || '').toLowerCase();
        return cat !== 'zzimage' && cat !== 'fahrzeugdisponiert';
      })
      .sort(
        (a, b) =>
          new Date(b.datetime_iso || 0).getTime() -
          new Date(a.datetime_iso || 0).getTime()
      );
  }

  // --- Polling ---
  private currentApiUrl() { return this.apiUrl?.trim() || this.DEFAULT_API_URL; }
  private clearNextPoll() {
    if (this.nextPollHandle) { clearTimeout(this.nextPollHandle); this.nextPollHandle = undefined; }
  }
  private scheduleNextPoll() {
    this.clearNextPoll();
    const delay = this.offeneEinsaetze().length > 0 ? this.FAST_MS : this.SLOW_MS;
    this.nextPollHandle = setTimeout(() => this.fetch(), delay);
  }
  private fetch() {
    if (this.loadingSig()) return;
    this.loadingSig.set(true);
    this.http.get<ApiResponse>(this.currentApiUrl(), { responseType: 'json' as const }).subscribe({
      next: (resp) => {
        if (!resp || resp.ok !== true || !resp.data) {
          this.errorSig.set('UngÃ¼ltige API-Antwort.'); this.payloadSig.set(null);
        } else {
          this.payloadSig.set(resp); this.errorSig.set(null);
        }
        this.loadingSig.set(false);
        this.scheduleNextPoll();
      },
      error: (err) => {
        this.errorSig.set(`Fehler beim Laden: ${err?.message || 'unbekannt'}`);
        this.payloadSig.set(null);
        this.loadingSig.set(false);
        this.clearNextPoll();
        this.nextPollHandle = setTimeout(() => this.fetch(), this.SLOW_MS);
      },
    });
  }

  // --- Carousel (1 sichtbar) ---
  private startCarousel() {
    this.stopCarousel();
    this.carouselHandle = setInterval(() => this.stepCarousel(), this.CAROUSEL_INTERVAL);
  }
  private stopCarousel() {
    if (this.carouselHandle) { clearInterval(this.carouselHandle); this.carouselHandle = undefined; }
  }
  private stepCarousel() {
    const m = this.slides().length;
    if (m <= 1) return;
    this.noTransition.set(false);
    this.slideIndex.set(this.slideIndex() + 1);
  }

  onTransitionEnd(ev?: TransitionEvent) {
    if (ev && ev.propertyName && ev.propertyName !== 'transform') return;
    const n = this.offeneEinsaetze().length;
    if (n > 1 && this.slideIndex() === n) {
      // Ausgleich: beim Wrap nicht doppelt so lange stehen
      this.stopCarousel();
      if (this.wrapTimeout) clearTimeout(this.wrapTimeout);

      this.noTransition.set(true);
      this.slideIndex.set(0);

      const dwell = Math.max(0, this.CAROUSEL_INTERVAL - this.TRANSITION_MS);
      this.wrapTimeout = setTimeout(() => {
        this.noTransition.set(false);
        this.slideIndex.set(1);
        this.startCarousel();
      }, dwell);
    }
  }

  // --- Fahrzeug-Status (Badges unten) ---
  private _isPresent(v: any): boolean {
    if (v === null || v === undefined) return false;
    if (typeof v === 'number') return Number.isFinite(v) && v > 0;
    const s = String(v).trim();
    if (!s || s === '-' || s === '0') return false;
    const n = Number(s);
    if (!Number.isNaN(n) && n <= 0) return false;
    return true;
  }
  private _kmMissing(f: Fahrzeug): boolean { return !this._isPresent(f?.km); }
  private _mannMissing(f: Fahrzeug): boolean { return !this._isPresent(f?.besatzung); }
  isCompleteFzg(f: Fahrzeug): boolean { return !this._kmMissing(f) && !this._mannMissing(f); }

  btnClass(f: Fahrzeug): string { return this.isCompleteFzg(f) ? 'vbtn-ok' : 'vbtn-bad'; }
  nameOf(f: Fahrzeug): string { return f?.funkrufname || f?.rufname || ''; }
  kmOf(f: Fahrzeug): string { return this._isPresent(f?.km) ? String(f.km) : '?'; }
  mannOf(f: Fahrzeug): string { return this._isPresent(f?.besatzung) ? String(f.besatzung) : '?'; }
  btnTitle(f: Fahrzeug): string {
    const kmMissing = this._kmMissing(f);
    const crewMissing = this._mannMissing(f);
    if (!kmMissing && !crewMissing) return 'Vollständig';
    if (kmMissing && crewMissing) return 'km und Besatzung fehlen';
    if (kmMissing) return 'km fehlt';
    return 'Besatzung fehlt';
  }

  // History: kurze Ãœbersicht (neueste zuerst)
  history() {
    const arr = this.payloadSig()?.data?.einsatzhistory ?? [];
    const items = [...arr].filter(h => (h?.einsatzstatus || 'beendet') === 'beendet');
    items.sort((a, b) => new Date(b.einsatzdatum_iso).getTime() - new Date(a.einsatzdatum_iso).getTime());
    return items;
  }

  // 'vor x Tagen/Stunden/Minuten' fÃ¼r History
  agoText(iso: string): string {
    const t = Date.parse(iso);
    if (!Number.isFinite(t)) return '';
    const diff = Date.now() - t;
    const min = Math.floor(diff / 60000);
    const hr = Math.floor(diff / 3600000);
    const day = Math.floor(diff / 86400000);
    if (day >= 1) return day === 1 ? 'vor 1 Tag' : `vor ${day} Tagen`;
    if (hr >= 1) return hr === 1 ? 'vor 1 Stunde' : `vor ${hr} Stunden`;
    const m = Math.max(0, min);
    return m <= 1 ? 'vor 1 Minute' : `vor ${m} Minuten`;
  }
}



  // --- Zusammenfassungs-Badges (7 Stück) ---
  private _catSet(e: EinsatzGruppe): Set<string> {
    const s = new Set<string>();
    for (const en of e?.tagebuch ?? []) {
      const c = (en?.meldungskategorie || '').trim().toLowerCase();
      if (c) s.add(c);
    }
    return s;
  }
  hasCategory(e: EinsatzGruppe, name: string): boolean {
    const key = (name || '').trim().toLowerCase();
    if (!key) return false;
    return this._catSet(e).has(key);
  }
  allVehiclesComplete(e: EinsatzGruppe): boolean {
    const list = e?.fahrzeuge ?? [];
    if (list.length === 0) return false;
    return list.every((f) => this.isCompleteFzg(f));
  }
  einsatzzeitenOk(e: EinsatzGruppe): boolean {
    const ein = (e?.einsatzzeitein_iso || '').toString().trim();
    const aus = (e?.einsatzzeitaus_iso || '').toString().trim();
    return !!ein && !!aus;
  }

